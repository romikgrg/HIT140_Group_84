# -*- coding: utf-8 -*-
"""Data_Exploration.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pyHi0vsDR_eX_03A03mHzAvK7f2fNOIT
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Load Datasets
dataset1 = pd.read_csv('/content/dataset1.csv')
dataset2 = pd.read_csv('/content/dataset2.csv')
dataset3 = pd.read_csv('/content/dataset3.csv')

# Merging datasets on 'ID'
merged_data = pd.merge(dataset1, dataset2, on='ID')
merged_data = pd.merge(merged_data, dataset3, on='ID')

# Creating a new column for total screen time by summing all relevant columns
merged_data['total_screen_time'] = (
    merged_data['C_we'] + merged_data['C_wk'] +
    merged_data['G_we'] + merged_data['G_wk'] +
    merged_data['S_we'] + merged_data['S_wk'] +
    merged_data['T_we'] + merged_data['T_wk']
)
print(merged_data.head())

# Calculating the well-being score by summing the 14 well-being indicators
merged_data['wellbeing_score'] = (
    merged_data['Optm'] + merged_data['Usef'] + merged_data['Relx'] +
    merged_data['Intp'] + merged_data['Engs'] + merged_data['Dealpr'] +
    merged_data['Thcklr'] + merged_data['Goodme'] + merged_data['Clsep'] +
    merged_data['Conf'] + merged_data['Mkmind'] + merged_data['Loved'] +
    merged_data['Intthg'] + merged_data['Cheer']
)
print(merged_data.head())

# Detecting outliers using IQR for total screen time
Q1 = merged_data['total_screen_time'].quantile(0.25)
Q3 = merged_data['total_screen_time'].quantile(0.75)
IQR = Q3 - Q1

# Define outlier boundaries
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Outliers in total screen time
outliers = merged_data[(merged_data['total_screen_time'] < lower_bound) |
                       (merged_data['total_screen_time'] > upper_bound)]
print(f"Number of outliers in total screen time: {len(outliers)}")

# Correlation between total screen time and well-being score
correlation = merged_data['total_screen_time'].corr(merged_data['wellbeing_score'])
print(f'Correlation between total screen time and well-being score: {correlation}')

# Univariate Analysis for total screen time
print(merged_data['total_screen_time'].describe())


# Univariate Analysis for well-being score
print(merged_data['wellbeing_score'].describe())

# Create a box plot for Well-Being Scores
plt.figure(figsize=(12, 6))

# Box plot for Well-Being Scores
plt.subplot(1, 2, 1)  # (rows, columns, panel number)
sns.boxplot(y=merged_data['wellbeing_score'])
plt.title('Box Plot of Well-Being Scores')
plt.ylabel('wellbeing_score')

# Box plot for Total Screen Time
plt.subplot(1, 2, 2)
sns.boxplot(y=merged_data['total_screen_time'])
plt.title('Box Plot of Total Screen Time')
plt.ylabel('Total Screen Time (hours)')

plt.tight_layout()  # Adjusts subplot params for better fit
plt.show()

plt.figure(figsize=(8, 6))
sns.countplot(x=merged_data['gender'])
plt.title('Count of Gender')
plt.xlabel('Gender')
plt.ylabel('Count')
plt.show()
# Step 1: Categorize Total Screen Time
bins = [0, 5, 10, 15, 20, 25]  # Define bins for categorizing total screen time
labels = ['0-5 hrs', '6-10 hrs', '11-15 hrs', '16-20 hrs', '21-25 hrs']
merged_data['Screen_Time_Category'] = pd.cut(merged_data['total_screen_time'], bins=bins, labels=labels, right=False)

# Step 2: Calculate the average well-being score for each screen time category
wellbeing_by_screen_time = merged_data.groupby('Screen_Time_Category')['wellbeing_score'].mean().reset_index()

# Step 3: Create a bar chart for Well-Being Scores by Screen Time Category
plt.figure(figsize=(10, 6))
sns.barplot(x='Screen_Time_Category', y='wellbeing_score', data=wellbeing_by_screen_time, palette='viridis')
plt.title('Average Well-Being Score by Total Screen Time Category')
plt.xlabel('Total Screen Time Category')
plt.ylabel('Average Well-Being Score')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.tight_layout()
plt.show()

#Bivariate (Continuous vs Continious)
# Select relevant continuous variables
continuous_columns = [
    'total_screen_time', 'wellbeing_score',
    'C_we', 'C_wk', 'G_we', 'G_wk',
    'S_we', 'S_wk', 'T_we', 'T_wk'
]

# Compute pairwise Pearson correlation
correlation_matrix = merged_data[continuous_columns].corr(method='pearson')

# Display the correlation matrix
print(correlation_matrix)

# Plot the heatmap of the correlation matrix
plt.figure(figsize=(10,8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0)
plt.title('Pairwise Pearson Correlation between Continuous Variables')
plt.show()

#Bivariate(categorical vs actegorical)
# Define bins and labels for well-being scores
bins_wellbeing = [0.5, 1.5, 2.5, 3.5, 4.5, 5.5]  # Bins for well-being scores
labels_wellbeing = ['1 (None)', '2 (Rarely)', '3 (Some)', '4 (Often)', '5 (All)']

# Categorize well-being scores
merged_data['Wellbeing_Category'] = pd.cut(merged_data['wellbeing_score'], bins=bins_wellbeing, labels=labels_wellbeing, right=True)

# Check the categorization
print(merged_data[['wellbeing_score', 'Wellbeing_Category']].head())

# Define bins for total screen time
bins_screen_time = [0, 10, 20, 30, 40]  # Define bins (0-10 hrs, 11-20 hrs, etc.)
labels_screen_time = ['Low (0-10 hrs)', 'Medium (11-20 hrs)', 'High (21-30 hrs)', 'Very High (31+ hrs)']
merged_data['Screen_Time_Category'] = pd.cut(merged_data['total_screen_time'], bins=bins_screen_time, labels=labels_screen_time, right=False)

# Check the categorization
print(merged_data[['total_screen_time', 'Screen_Time_Category']].head())

# Create a contingency table for Gender and Screen Time Category
gender_screen_time_table = pd.crosstab(merged_data['gender'], merged_data['Screen_Time_Category'], margins=True)

# Print the contingency table
print("Contingency Table: Gender vs Screen Time Category:\n", gender_screen_time_table)

# Step 4: Visualize the relationship using a stacked bar chart
gender_screen_time_table.iloc[:-1, :-1].plot(kind='bar', stacked=True, color=['skyblue', 'lightgreen', 'lightcoral', 'gold'])
plt.title('Gender vs. Screen Time Category')
plt.xlabel('Gender')
plt.ylabel('Count')
plt.xticks(rotation=0)  # Rotate x-axis labels for better readability
plt.legend(title='Screen Time Category')
plt.tight_layout()
plt.show()

# Average well-being score by gender
gender_group = merged_data.groupby('gender')['wellbeing_score'].mean()
print(f"Average well-being score by gender: \n{gender_group}")

# Average total screen time by deprivation status
deprived_group = merged_data.groupby('deprived')['total_screen_time'].mean()
print(f"Average total screen time by deprivation status: \n{deprived_group}")

#Categorical vs. Continuous Bivariate Analysis
# Categorize screen time into Low, Medium, and High
bins_screen_time = [0, 10, 20, float('inf')]  # Define bins for categorizing screen time
labels_screen_time = ['Low (0-10 hrs)', 'Medium (11-20 hrs)', 'High (21+ hrs)']
merged_data['Screen_Time_Category'] = pd.cut(merged_data['total_screen_time'], bins=bins_screen_time, labels=labels_screen_time, right=False)

# Check the categorization
print(merged_data[['total_screen_time', 'Screen_Time_Category']].head())

# Calculate summary statistics for well-being scores based on screen time category
summary_stats = merged_data.groupby('Screen_Time_Category')['wellbeing_score'].describe()
print(summary_stats)

# Create a box plot for Well-being Score by Screen Time Category
plt.figure(figsize=(10, 6))
sns.boxplot(data=merged_data, x='Screen_Time_Category', y='wellbeing_score')
plt.title('Well-being Score by Screen Time Category')
plt.xlabel('Screen Time Category')
plt.ylabel('Well-being Score')
plt.grid(True)
plt.show()